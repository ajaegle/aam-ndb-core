{"version":3,"sources":["./src/app/conflict-resolution/auto-resolution/auto-resolution.service.ts","./src/app/conflict-resolution/compare-rev/compare-rev.component.ts","./src/app/conflict-resolution/compare-rev/compare-rev.component.html","./src/app/conflict-resolution/conflict-resolution-list/conflict-resolution-list.component.ts","./src/app/conflict-resolution/conflict-resolution-list/conflict-resolution-list.component.html","./src/app/conflict-resolution/conflict-resolution-routing.module.ts","./src/app/conflict-resolution/conflict-resolution.module.ts","./src/app/core/database/query-data-source.ts"],"names":[],"mappings":"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","file":"conflict-resolution-conflict-resolution-module-es2015.js","sourcesContent":["import { Inject, Injectable } from \"@angular/core\";\nimport {\n  CONFLICT_RESOLUTION_STRATEGY,\n  ConflictResolutionStrategy,\n} from \"./conflict-resolution-strategy\";\n\n/**\n * Attempt automatic conflict resolutions or identify trivial conflicts for semi-automatic resolution.\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AutoResolutionService {\n  constructor(\n    @Inject(CONFLICT_RESOLUTION_STRATEGY)\n    private resolutionStrategies: ConflictResolutionStrategy[]\n  ) {}\n\n  /**\n   * Checks whether any registered resolution strategy suggests that the conflicting version should be automatically deleted.\n   *\n   * This method does not delete the conflict. It only suggests whether it should be deleted automatically.\n   *\n   * @param currentDoc The currently active revision of the doc\n   * @param conflictingDoc The conflicting revision of the doc to be checked whether it can be deleted\n   */\n  public shouldDeleteConflictingRevision(\n    currentDoc: any,\n    conflictingDoc: any\n  ): boolean {\n    for (const resolutionStrategy of this.resolutionStrategies) {\n      if (\n        resolutionStrategy.autoDeleteConflictingRevision(\n          currentDoc,\n          conflictingDoc\n        )\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","import { Component, Input } from \"@angular/core\";\nimport { diff } from \"deep-object-diff\";\nimport _ from \"lodash\";\nimport { ConfirmationDialogService } from \"../../core/confirmation-dialog/confirmation-dialog.service\";\nimport { Database } from \"../../core/database/database\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { AutoResolutionService } from \"../auto-resolution/auto-resolution.service\";\n\n/**\n * Visualize one specific conflicting document revision and offer resolution options.\n */\n@Component({\n  selector: \"app-compare-rev\",\n  templateUrl: \"./compare-rev.component.html\",\n  styleUrls: [\"./compare-rev.component.scss\"],\n})\nexport class CompareRevComponent {\n  /** revision key (_rev) of the confliction version to be displayed */\n  @Input() rev: string;\n\n  /** document from the database in the current version */\n  @Input() doc: any;\n\n  /** used in the template for a tooltip displaying the full document */\n  docString: string;\n\n  /** document from the database in the conflicting version */\n  revDoc: any;\n\n  /** changes the conflicting doc has compared to the current doc */\n  diffs;\n\n  /** changes the current doc has compared to the conflicting doc.\n   *\n   * This mirrors `diffs` but shows the things that would be added if the current doc would\n   * overwrite the conflicting version instead of the other way round.\n   */\n  diffsReverse;\n\n  /** the user edited diff that can be applied as an alternative resolution (initialized with same value as `diffs`) */\n  diffsCustom;\n\n  /** whether/how this conflict has been resolved */\n  resolution: string = null;\n\n  constructor(\n    private db: Database,\n    private confirmationDialog: ConfirmationDialogService,\n    private snackBar: MatSnackBar,\n    private conflictResolver: AutoResolutionService\n  ) {}\n\n  /**\n   * Load the document version (revision) to be displayed and generate the diffs to be visualized.\n   */\n  public async loadRev() {\n    this.revDoc = await this.db.get(this.doc._id, { rev: this.rev });\n    const diffObject = diff(this.doc, this.revDoc);\n    this.diffs = this.stringify(diffObject);\n\n    const diffReverseObject = diff(this.revDoc, this.doc);\n    this.diffsReverse = this.stringify(diffReverseObject);\n    this.diffsCustom = this.stringify(diffReverseObject);\n\n    const isIrrelevantConflictingDoc = this.conflictResolver.shouldDeleteConflictingRevision(\n      this.doc,\n      this.revDoc\n    );\n    if (isIrrelevantConflictingDoc) {\n      const success = await this.deleteDoc(this.revDoc);\n      if (success) {\n        this.resolution = \"automatically deleted trivial conflict\";\n      }\n    }\n  }\n\n  /**\n   * Generate a human-readable string of the given object.\n   * @param entity Object to be stringified\n   */\n  stringify(entity: any) {\n    return JSON.stringify(\n      entity,\n      (k, v) => (k === \"_rev\" ? undefined : v), // ignore \"_rev\"\n      2\n    );\n  }\n\n  /**\n   * Resolve the displayed conflict by deleting the conflicting revision doc and keeping the current doc.\n   * @param docToDelete Document to be deleted\n   */\n  public resolveByDelete(docToDelete: any) {\n    const dialogRef = this.confirmationDialog.openDialog(\n      \"Delete Conflicting Version?\",\n      \"Are you sure you want to keep the current version and delete this conflicting version? \" +\n        this.stringify(docToDelete)\n    );\n\n    dialogRef.afterClosed().subscribe(async (confirmed) => {\n      if (confirmed) {\n        const success = await this.deleteDoc(docToDelete);\n        if (success) {\n          this.resolution = \"deleted conflicting version\";\n        }\n      }\n    });\n  }\n\n  private async deleteDoc(docToDelete: any): Promise<boolean> {\n    try {\n      await this.db.remove(docToDelete);\n      return true;\n    } catch (e) {\n      const errorMessage = e.message || e.toString();\n      this.snackBar.open(\n        \"Error trying to delete conflicting version: \" + errorMessage\n      );\n      return false;\n    }\n  }\n\n  private async saveDoc(docToSave: any): Promise<boolean> {\n    try {\n      await this.db.put(docToSave);\n      return true;\n    } catch (e) {\n      const errorMessage = e.message || e.toString();\n      this.snackBar.open(\"Error trying to save version: \" + errorMessage);\n      return false;\n    }\n  }\n\n  /**\n   * Apply the given diff, save the resulting new document to the database\n   * and remove the conflicting document, thereby resolving the conflict.\n   *\n   * This method is also used to resolve the conflict to keep the conflicting version instead of the current doc.\n   * Then this simply applies the diff of the existing conflicting version instead of a user-edited diff.\n   *\n   * @param diffStringToApply The (user-edited) diff to be applied to the current doc\n   */\n  public async resolveByManualEdit(diffStringToApply: string) {\n    const originalDoc = _.merge({}, this.doc);\n    const diffToApply = JSON.parse(diffStringToApply);\n    _.merge(this.doc, diffToApply);\n\n    const newChanges = diff(originalDoc, this.doc);\n\n    const dialogRef = this.confirmationDialog.openDialog(\n      \"Save Changes for Conflict Resolution?\",\n      \"Are you sure you want to save the following changes and delete the conflicting version? \" +\n        this.stringify(newChanges)\n    );\n    dialogRef.afterClosed().subscribe(async (confirmed) => {\n      if (confirmed) {\n        const successSave = await this.saveDoc(this.doc);\n        const successDel = await this.deleteDoc(this.revDoc);\n        if (successSave && successDel) {\n          if (diffStringToApply === this.diffs) {\n            this.resolution = \"selected conflicting version\";\n          } else {\n            this.resolution = \"resolved manually\";\n          }\n        }\n      }\n    });\n  }\n}\n","<mat-expansion-panel (opened)='loadRev()' *ngIf='!resolution'>\n  <mat-expansion-panel-header>\n    <mat-panel-title>\n      <span [matTooltip]='docString' (mouseover)='docString = stringify(doc)'>{{rev}}</span>\n    </mat-panel-title>\n  </mat-expansion-panel-header>\n\n  <div fxLayout='row' fxLayoutGap='10px'>\n    <div fxFlex='50'>\n      <label for='conflictingDiff'>Conflicting Entity:</label>\n      <textarea id='conflictingDiff' cdkTextareaAutosize class='diffText conflicting' disabled>\n        {{ diffs }}\n      </textarea>\n      <button mat-raised-button class='resolution-btn' (click)='resolveByManualEdit(diffs)'>\n        Choose conflicting version\n      </button>\n    </div>\n\n    <div fxFlex='50'>\n      <label for='customDiff'>Custom Resolution:</label>\n      <textarea id='customDiff' cdkTextareaAutosize class='diffText custom'\n                [(ngModel)]='diffsCustom'>\n      </textarea>\n      <button mat-raised-button class='resolution-btn' (click)='resolveByManualEdit(diffsCustom)'>\n        Save manually resolved record\n      </button>\n    </div>\n\n    <div fxFlex='50'>\n      <label for='currentDiff'>Current Entity:</label>\n      <textarea id='currentDiff' cdkTextareaAutosize class='diffText current' disabled>\n        {{ diffsReverse }}\n      </textarea>\n      <button mat-raised-button class='resolution-btn' (click)='resolveByDelete(revDoc)'>\n        Choose current version\n      </button>\n    </div>\n  </div>\n</mat-expansion-panel>\n\n\n<div *ngIf='resolution'>\n  <em>Resolved ({{resolution}})</em>\n</div>\n","import { AfterViewInit, Component, Optional, ViewChild } from \"@angular/core\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { QueryDataSource } from \"../../core/database/query-data-source\";\nimport { Entity } from \"../../core/entity/entity\";\nimport { Database } from \"../../core/database/database\";\nimport { EntitySchemaService } from \"../../core/entity/schema/entity-schema.service\";\n\n/**\n * List all document conflicts and allow the user to expand for details and manual resolution.\n */\n@Component({\n  selector: \"app-conflict-resolution-list\",\n  templateUrl: \"./conflict-resolution-list.component.html\",\n  styleUrls: [\"./conflict-resolution-list.component.scss\"],\n})\nexport class ConflictResolutionListComponent implements AfterViewInit {\n  /** visible table columns in the template */\n  columnsToDisplay = [\"id\", \"data\"];\n\n  /** data for the table in the template */\n  dataSource: QueryDataSource<Entity>;\n\n  /** reference to mat-table paginator from template, required to set up pagination */\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(\n    private db: Database,\n    @Optional() private entitySchemaService: EntitySchemaService\n  ) {}\n\n  async ngAfterViewInit() {\n    await this.createDatabaseIndexForConflicts();\n    this.dataSource = new QueryDataSource(this.db, \"conflicts/all\");\n    this.dataSource.paginator = this.paginator;\n  }\n\n  /**\n   * Create the database index to query document conflicts, if the index doesn't exist already.\n   */\n  private createDatabaseIndexForConflicts() {\n    const designDoc = {\n      _id: \"_design/conflicts\",\n      views: {\n        all: {\n          map:\n            \"(doc) => { \" +\n            \"if (doc._conflicts) { emit(doc._conflicts, doc._id); } \" +\n            \"}\",\n        },\n      },\n    };\n\n    return this.db.saveDatabaseIndex(designDoc);\n  }\n}\n","<p>conflicts to resolve:</p>\n\n<div class=\"mat-elevation-z8\">\n  <div *ngIf=\"dataSource?.loading$ | async\">\n    <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n  </div>\n\n  <table mat-table [dataSource]=\"dataSource\" matSort style='width: 100%;'>\n\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> _id </th>\n      <td mat-cell *matCellDef=\"let row\"> {{row.id}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"data\" class=\"col-data\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Data </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <app-compare-rev *ngFor='let rev of row.key' [rev]='rev' [doc]='row.doc'></app-compare-rev>\n      </td>\n    </ng-container>\n\n\n    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n    <tr mat-row *matRowDef=\"let entity; columns: columnsToDisplay\" class=\"table-list-item\"></tr>\n  </table>\n\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" [pageSize]=\"10\" showFirstLastButtons></mat-paginator>\n</div>\n","import { ConflictResolutionListComponent } from \"./conflict-resolution-list/conflict-resolution-list.component\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { NgModule } from \"@angular/core\";\n\n/**\n * Internal routes of the lazy-loaded ConflictResolutionModule.\n * These are relative to the route the module is loaded at in the main app.\n */\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ConflictResolutionListComponent,\n  },\n];\n\n/**\n * Routing Module for the lazy-loaded {@link ConflictResolutionModule}.\n */\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ConflictResolutionRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ConflictResolutionListComponent } from \"./conflict-resolution-list/conflict-resolution-list.component\";\nimport { MatTableModule } from \"@angular/material/table\";\nimport { MatSortModule } from \"@angular/material/sort\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\nimport { MatExpansionModule } from \"@angular/material/expansion\";\nimport { CompareRevComponent } from \"./compare-rev/compare-rev.component\";\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { FormsModule } from \"@angular/forms\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { ConflictResolutionRoutingModule } from \"./conflict-resolution-routing.module\";\nimport { ConflictResolutionStrategy } from \"./auto-resolution/conflict-resolution-strategy\";\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\n\n/**\n * Display and resolve document conflicts in the database through a simple user interface for administrators.\n *\n * You can register additional custom strategies to auto-resolve conflicts\n * by implementing {@link ConflictResolutionStrategy}\n * and registering your implementation as a provider in your Module:\n * `{ provide: CONFLICT_RESOLUTION_STRATEGY, useClass: MyConflictResolutionStrategy, multi: true }`\n *\n * Import this as a \"lazy-loaded\" module in your main routing:\n * @example\nroutes: Routes = [\n  {\n    path: \"admin/conflicts\",\n    canActivate: [AdminGuard],\n    loadChildren: () =>\n      import(\"./conflict-resolution/conflict-resolution.module\").then(\n        (m) => m.ConflictResolutionModule\n      ),\n  }\n];\n */\n@NgModule({\n  imports: [\n    ConflictResolutionRoutingModule,\n    CommonModule,\n    MatTableModule,\n    MatSortModule,\n    MatIconModule,\n    MatButtonModule,\n    MatPaginatorModule,\n    MatExpansionModule,\n    FlexLayoutModule,\n    MatInputModule,\n    FormsModule,\n    MatTooltipModule,\n    MatProgressBarModule,\n  ],\n  declarations: [ConflictResolutionListComponent, CompareRevComponent],\n})\nexport class ConflictResolutionModule {}\n","import { CollectionViewer, DataSource } from \"@angular/cdk/collections\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { Entity } from \"../entity/entity\";\nimport { Database } from \"./database\";\n\n/**\n * Implementation of a datasource that directly queries an index on the {@link Database}\n * supporting optional pagination to only load a subset of the data as required by a paginator.\n *\n * An instance of QueryDataSource can be created and used as source for a mat-table component.\n *\n * also see https://material.angular.io/cdk/table/overview#connecting-the-table-to-a-data-source\n * and https://medium.com/angular-in-depth/angular-material-pagination-datasource-73080d3457fe\n */\nexport class QueryDataSource<T extends Entity> implements DataSource<T> {\n  /** internal observable to emit new result data. This is provided to users calling .connect() */\n  private dataSubject = new BehaviorSubject<T[]>([]);\n\n  /** internal observable to emit new loading status. This is provided to users through the public .loading$ */\n  private loadingSubject = new BehaviorSubject<boolean>(false);\n\n  /** Indicates whether the datasource is currently loading new data */\n  public loading$ = this.loadingSubject.asObservable();\n\n  private _paginator: MatPaginator | null;\n  get paginator(): MatPaginator | null {\n    return this._paginator;\n  }\n  set paginator(value: MatPaginator | null) {\n    this._paginator = value;\n\n    if (this.paginator) {\n      this.paginator.page.subscribe(() => this.loadData());\n      this.loadData();\n    }\n  }\n\n  constructor(private database: Database, private queryName: string) {}\n\n  /**\n   * Connect to the datasource and receive an observable to subscribe to loaded data.\n   * Whenever pagination is changed this will emit new datasets.\n   * @param collectionViewer (not necessary)\n   */\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    this.loadData();\n    return this.dataSubject.asObservable();\n  }\n\n  /**\n   * Disconnect and discard open observables for this datasource.\n   * @param collectionViewer (not necessary)\n   */\n  disconnect(collectionViewer: CollectionViewer): void {\n    this.dataSubject.complete();\n    this.loadingSubject.complete();\n  }\n\n  /**\n   * (re)load data from the database for the given query and (if set) to current pagination values.\n   */\n  async loadData() {\n    this.loadingSubject.next(true);\n\n    const options: any = {\n      include_docs: true,\n    };\n    if (this.paginator) {\n      options.limit = this.paginator.pageSize;\n      options.skip = this.paginator.pageIndex * this.paginator.pageSize;\n    }\n\n    const results = await this.database.query(this.queryName, options);\n\n    this.paginator.length = results.total_rows;\n    this.dataSubject.next(results.rows);\n\n    this.loadingSubject.next(false);\n  }\n}\n"],"sourceRoot":"webpack:///"}