{"version":3,"sources":["webpack:///src/app/conflict-resolution/auto-resolution/auto-resolution.service.ts","webpack:///src/app/conflict-resolution/compare-rev/compare-rev.component.html","webpack:///src/app/conflict-resolution/compare-rev/compare-rev.component.ts","webpack:///src/app/conflict-resolution/conflict-resolution-list/conflict-resolution-list.component.html","webpack:///src/app/conflict-resolution/conflict-resolution-list/conflict-resolution-list.component.ts","webpack:///src/app/conflict-resolution/conflict-resolution-routing.module.ts","webpack:///src/app/conflict-resolution/conflict-resolution.module.ts","webpack:///src/app/core/database/query-data-source.ts"],"names":["AutoResolutionService","resolutionStrategies","currentDoc","conflictingDoc","resolutionStrategy","autoDeleteConflictingRevision","providedIn","CompareRevComponent","db","confirmationDialog","snackBar","conflictResolver","resolution","get","doc","_id","rev","revDoc","diffObject","diffs","stringify","diffReverseObject","diffsReverse","diffsCustom","isIrrelevantConflictingDoc","shouldDeleteConflictingRevision","deleteDoc","success","entity","JSON","k","v","undefined","docToDelete","dialogRef","openDialog","afterClosed","subscribe","confirmed","remove","errorMessage","message","toString","open","docToSave","put","diffStringToApply","originalDoc","merge","diffToApply","parse","newChanges","saveDoc","successSave","successDel","selector","templateUrl","styleUrls","ConflictResolutionListComponent","entitySchemaService","columnsToDisplay","createDatabaseIndexForConflicts","dataSource","paginator","designDoc","views","all","map","saveDatabaseIndex","routes","path","component","ConflictResolutionRoutingModule","forChild","imports","exports","ConflictResolutionModule","declarations","QueryDataSource","database","queryName","dataSubject","loadingSubject","loading$","asObservable","collectionViewer","loadData","complete","next","options","include_docs","limit","pageSize","skip","pageIndex","query","results","length","total_rows","rows","_paginator","value","page"],"mappings":"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","file":"conflict-resolution-conflict-resolution-module-es5.js","sourcesContent":["import { Inject, Injectable } from \"@angular/core\";\nimport {\n  CONFLICT_RESOLUTION_STRATEGY,\n  ConflictResolutionStrategy,\n} from \"./conflict-resolution-strategy\";\n\n/**\n * Attempt automatic conflict resolutions or identify trivial conflicts for semi-automatic resolution.\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AutoResolutionService {\n  constructor(\n    @Inject(CONFLICT_RESOLUTION_STRATEGY)\n    private resolutionStrategies: ConflictResolutionStrategy[]\n  ) {}\n\n  /**\n   * Checks whether any registered resolution strategy suggests that the conflicting version should be automatically deleted.\n   *\n   * This method does not delete the conflict. It only suggests whether it should be deleted automatically.\n   *\n   * @param currentDoc The currently active revision of the doc\n   * @param conflictingDoc The conflicting revision of the doc to be checked whether it can be deleted\n   */\n  public shouldDeleteConflictingRevision(\n    currentDoc: any,\n    conflictingDoc: any\n  ): boolean {\n    for (const resolutionStrategy of this.resolutionStrategies) {\n      if (\n        resolutionStrategy.autoDeleteConflictingRevision(\n          currentDoc,\n          conflictingDoc\n        )\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","<mat-expansion-panel (opened)='loadRev()' *ngIf='!resolution'>\n  <mat-expansion-panel-header>\n    <mat-panel-title>\n      <span [matTooltip]='docString' (mouseover)='docString = stringify(doc)'>{{rev}}</span>\n    </mat-panel-title>\n  </mat-expansion-panel-header>\n\n  <div fxLayout='row' fxLayoutGap='10px'>\n    <div fxFlex='50'>\n      <label for='conflictingDiff'>Conflicting Entity:</label>\n      <textarea id='conflictingDiff' cdkTextareaAutosize class='diffText conflicting' disabled>\n        {{ diffs }}\n      </textarea>\n      <button mat-raised-button class='resolution-btn' (click)='resolveByManualEdit(diffs)'>\n        Choose conflicting version\n      </button>\n    </div>\n\n    <div fxFlex='50'>\n      <label for='customDiff'>Custom Resolution:</label>\n      <textarea id='customDiff' cdkTextareaAutosize class='diffText custom'\n                [(ngModel)]='diffsCustom'>\n      </textarea>\n      <button mat-raised-button class='resolution-btn' (click)='resolveByManualEdit(diffsCustom)'>\n        Save manually resolved record\n      </button>\n    </div>\n\n    <div fxFlex='50'>\n      <label for='currentDiff'>Current Entity:</label>\n      <textarea id='currentDiff' cdkTextareaAutosize class='diffText current' disabled>\n        {{ diffsReverse }}\n      </textarea>\n      <button mat-raised-button class='resolution-btn' (click)='resolveByDelete(revDoc)'>\n        Choose current version\n      </button>\n    </div>\n  </div>\n</mat-expansion-panel>\n\n\n<div *ngIf='resolution'>\n  <em>Resolved ({{resolution}})</em>\n</div>\n","import { Component, Input } from \"@angular/core\";\nimport { diff } from \"deep-object-diff\";\nimport _ from \"lodash\";\nimport { ConfirmationDialogService } from \"../../core/confirmation-dialog/confirmation-dialog.service\";\nimport { Database } from \"../../core/database/database\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { AutoResolutionService } from \"../auto-resolution/auto-resolution.service\";\n\n/**\n * Visualize one specific conflicting document revision and offer resolution options.\n */\n@Component({\n  selector: \"app-compare-rev\",\n  templateUrl: \"./compare-rev.component.html\",\n  styleUrls: [\"./compare-rev.component.scss\"],\n})\nexport class CompareRevComponent {\n  /** revision key (_rev) of the confliction version to be displayed */\n  @Input() rev: string;\n\n  /** document from the database in the current version */\n  @Input() doc: any;\n\n  /** used in the template for a tooltip displaying the full document */\n  docString: string;\n\n  /** document from the database in the conflicting version */\n  revDoc: any;\n\n  /** changes the conflicting doc has compared to the current doc */\n  diffs;\n\n  /** changes the current doc has compared to the conflicting doc.\n   *\n   * This mirrors `diffs` but shows the things that would be added if the current doc would\n   * overwrite the conflicting version instead of the other way round.\n   */\n  diffsReverse;\n\n  /** the user edited diff that can be applied as an alternative resolution (initialized with same value as `diffs`) */\n  diffsCustom;\n\n  /** whether/how this conflict has been resolved */\n  resolution: string = null;\n\n  constructor(\n    private db: Database,\n    private confirmationDialog: ConfirmationDialogService,\n    private snackBar: MatSnackBar,\n    private conflictResolver: AutoResolutionService\n  ) {}\n\n  /**\n   * Load the document version (revision) to be displayed and generate the diffs to be visualized.\n   */\n  public async loadRev() {\n    this.revDoc = await this.db.get(this.doc._id, { rev: this.rev });\n    const diffObject = diff(this.doc, this.revDoc);\n    this.diffs = this.stringify(diffObject);\n\n    const diffReverseObject = diff(this.revDoc, this.doc);\n    this.diffsReverse = this.stringify(diffReverseObject);\n    this.diffsCustom = this.stringify(diffReverseObject);\n\n    const isIrrelevantConflictingDoc = this.conflictResolver.shouldDeleteConflictingRevision(\n      this.doc,\n      this.revDoc\n    );\n    if (isIrrelevantConflictingDoc) {\n      const success = await this.deleteDoc(this.revDoc);\n      if (success) {\n        this.resolution = \"automatically deleted trivial conflict\";\n      }\n    }\n  }\n\n  /**\n   * Generate a human-readable string of the given object.\n   * @param entity Object to be stringified\n   */\n  stringify(entity: any) {\n    return JSON.stringify(\n      entity,\n      (k, v) => (k === \"_rev\" ? undefined : v), // ignore \"_rev\"\n      2\n    );\n  }\n\n  /**\n   * Resolve the displayed conflict by deleting the conflicting revision doc and keeping the current doc.\n   * @param docToDelete Document to be deleted\n   */\n  public resolveByDelete(docToDelete: any) {\n    const dialogRef = this.confirmationDialog.openDialog(\n      \"Delete Conflicting Version?\",\n      \"Are you sure you want to keep the current version and delete this conflicting version? \" +\n        this.stringify(docToDelete)\n    );\n\n    dialogRef.afterClosed().subscribe(async (confirmed) => {\n      if (confirmed) {\n        const success = await this.deleteDoc(docToDelete);\n        if (success) {\n          this.resolution = \"deleted conflicting version\";\n        }\n      }\n    });\n  }\n\n  private async deleteDoc(docToDelete: any): Promise<boolean> {\n    try {\n      await this.db.remove(docToDelete);\n      return true;\n    } catch (e) {\n      const errorMessage = e.message || e.toString();\n      this.snackBar.open(\n        \"Error trying to delete conflicting version: \" + errorMessage\n      );\n      return false;\n    }\n  }\n\n  private async saveDoc(docToSave: any): Promise<boolean> {\n    try {\n      await this.db.put(docToSave);\n      return true;\n    } catch (e) {\n      const errorMessage = e.message || e.toString();\n      this.snackBar.open(\"Error trying to save version: \" + errorMessage);\n      return false;\n    }\n  }\n\n  /**\n   * Apply the given diff, save the resulting new document to the database\n   * and remove the conflicting document, thereby resolving the conflict.\n   *\n   * This method is also used to resolve the conflict to keep the conflicting version instead of the current doc.\n   * Then this simply applies the diff of the existing conflicting version instead of a user-edited diff.\n   *\n   * @param diffStringToApply The (user-edited) diff to be applied to the current doc\n   */\n  public async resolveByManualEdit(diffStringToApply: string) {\n    const originalDoc = _.merge({}, this.doc);\n    const diffToApply = JSON.parse(diffStringToApply);\n    _.merge(this.doc, diffToApply);\n\n    const newChanges = diff(originalDoc, this.doc);\n\n    const dialogRef = this.confirmationDialog.openDialog(\n      \"Save Changes for Conflict Resolution?\",\n      \"Are you sure you want to save the following changes and delete the conflicting version? \" +\n        this.stringify(newChanges)\n    );\n    dialogRef.afterClosed().subscribe(async (confirmed) => {\n      if (confirmed) {\n        const successSave = await this.saveDoc(this.doc);\n        const successDel = await this.deleteDoc(this.revDoc);\n        if (successSave && successDel) {\n          if (diffStringToApply === this.diffs) {\n            this.resolution = \"selected conflicting version\";\n          } else {\n            this.resolution = \"resolved manually\";\n          }\n        }\n      }\n    });\n  }\n}\n","<p>conflicts to resolve:</p>\n\n<div class=\"mat-elevation-z8\">\n  <div *ngIf=\"dataSource?.loading$ | async\">\n    <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n  </div>\n\n  <table mat-table [dataSource]=\"dataSource\" matSort style='width: 100%;'>\n\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> _id </th>\n      <td mat-cell *matCellDef=\"let row\"> {{row.id}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"data\" class=\"col-data\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Data </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <app-compare-rev *ngFor='let rev of row.key' [rev]='rev' [doc]='row.doc'></app-compare-rev>\n      </td>\n    </ng-container>\n\n\n    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n    <tr mat-row *matRowDef=\"let entity; columns: columnsToDisplay\" class=\"table-list-item\"></tr>\n  </table>\n\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" [pageSize]=\"10\" showFirstLastButtons></mat-paginator>\n</div>\n","import { AfterViewInit, Component, Optional, ViewChild } from \"@angular/core\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { QueryDataSource } from \"../../core/database/query-data-source\";\nimport { Entity } from \"../../core/entity/entity\";\nimport { Database } from \"../../core/database/database\";\nimport { EntitySchemaService } from \"../../core/entity/schema/entity-schema.service\";\n\n/**\n * List all document conflicts and allow the user to expand for details and manual resolution.\n */\n@Component({\n  selector: \"app-conflict-resolution-list\",\n  templateUrl: \"./conflict-resolution-list.component.html\",\n  styleUrls: [\"./conflict-resolution-list.component.scss\"],\n})\nexport class ConflictResolutionListComponent implements AfterViewInit {\n  /** visible table columns in the template */\n  columnsToDisplay = [\"id\", \"data\"];\n\n  /** data for the table in the template */\n  dataSource: QueryDataSource<Entity>;\n\n  /** reference to mat-table paginator from template, required to set up pagination */\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(\n    private db: Database,\n    @Optional() private entitySchemaService: EntitySchemaService\n  ) {}\n\n  async ngAfterViewInit() {\n    await this.createDatabaseIndexForConflicts();\n    this.dataSource = new QueryDataSource(this.db, \"conflicts/all\");\n    this.dataSource.paginator = this.paginator;\n  }\n\n  /**\n   * Create the database index to query document conflicts, if the index doesn't exist already.\n   */\n  private createDatabaseIndexForConflicts() {\n    const designDoc = {\n      _id: \"_design/conflicts\",\n      views: {\n        all: {\n          map:\n            \"(doc) => { \" +\n            \"if (doc._conflicts) { emit(doc._conflicts, doc._id); } \" +\n            \"}\",\n        },\n      },\n    };\n\n    return this.db.saveDatabaseIndex(designDoc);\n  }\n}\n","import { ConflictResolutionListComponent } from \"./conflict-resolution-list/conflict-resolution-list.component\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { NgModule } from \"@angular/core\";\n\n/**\n * Internal routes of the lazy-loaded ConflictResolutionModule.\n * These are relative to the route the module is loaded at in the main app.\n */\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ConflictResolutionListComponent,\n  },\n];\n\n/**\n * Routing Module for the lazy-loaded {@link ConflictResolutionModule}.\n */\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ConflictResolutionRoutingModule {}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ConflictResolutionListComponent } from \"./conflict-resolution-list/conflict-resolution-list.component\";\nimport { MatTableModule } from \"@angular/material/table\";\nimport { MatSortModule } from \"@angular/material/sort\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\nimport { MatExpansionModule } from \"@angular/material/expansion\";\nimport { CompareRevComponent } from \"./compare-rev/compare-rev.component\";\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { FormsModule } from \"@angular/forms\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { ConflictResolutionRoutingModule } from \"./conflict-resolution-routing.module\";\nimport { ConflictResolutionStrategy } from \"./auto-resolution/conflict-resolution-strategy\";\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\n\n/**\n * Display and resolve document conflicts in the database through a simple user interface for administrators.\n *\n * You can register additional custom strategies to auto-resolve conflicts\n * by implementing {@link ConflictResolutionStrategy}\n * and registering your implementation as a provider in your Module:\n * `{ provide: CONFLICT_RESOLUTION_STRATEGY, useClass: MyConflictResolutionStrategy, multi: true }`\n *\n * Import this as a \"lazy-loaded\" module in your main routing:\n * @example\nroutes: Routes = [\n  {\n    path: \"admin/conflicts\",\n    canActivate: [AdminGuard],\n    loadChildren: () =>\n      import(\"./conflict-resolution/conflict-resolution.module\").then(\n        (m) => m.ConflictResolutionModule\n      ),\n  }\n];\n */\n@NgModule({\n  imports: [\n    ConflictResolutionRoutingModule,\n    CommonModule,\n    MatTableModule,\n    MatSortModule,\n    MatIconModule,\n    MatButtonModule,\n    MatPaginatorModule,\n    MatExpansionModule,\n    FlexLayoutModule,\n    MatInputModule,\n    FormsModule,\n    MatTooltipModule,\n    MatProgressBarModule,\n  ],\n  declarations: [ConflictResolutionListComponent, CompareRevComponent],\n})\nexport class ConflictResolutionModule {}\n","import { CollectionViewer, DataSource } from \"@angular/cdk/collections\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { Entity } from \"../entity/entity\";\nimport { Database } from \"./database\";\n\n/**\n * Implementation of a datasource that directly queries an index on the {@link Database}\n * supporting optional pagination to only load a subset of the data as required by a paginator.\n *\n * An instance of QueryDataSource can be created and used as source for a mat-table component.\n *\n * also see https://material.angular.io/cdk/table/overview#connecting-the-table-to-a-data-source\n * and https://medium.com/angular-in-depth/angular-material-pagination-datasource-73080d3457fe\n */\nexport class QueryDataSource<T extends Entity> implements DataSource<T> {\n  /** internal observable to emit new result data. This is provided to users calling .connect() */\n  private dataSubject = new BehaviorSubject<T[]>([]);\n\n  /** internal observable to emit new loading status. This is provided to users through the public .loading$ */\n  private loadingSubject = new BehaviorSubject<boolean>(false);\n\n  /** Indicates whether the datasource is currently loading new data */\n  public loading$ = this.loadingSubject.asObservable();\n\n  private _paginator: MatPaginator | null;\n  get paginator(): MatPaginator | null {\n    return this._paginator;\n  }\n  set paginator(value: MatPaginator | null) {\n    this._paginator = value;\n\n    if (this.paginator) {\n      this.paginator.page.subscribe(() => this.loadData());\n      this.loadData();\n    }\n  }\n\n  constructor(private database: Database, private queryName: string) {}\n\n  /**\n   * Connect to the datasource and receive an observable to subscribe to loaded data.\n   * Whenever pagination is changed this will emit new datasets.\n   * @param collectionViewer (not necessary)\n   */\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    this.loadData();\n    return this.dataSubject.asObservable();\n  }\n\n  /**\n   * Disconnect and discard open observables for this datasource.\n   * @param collectionViewer (not necessary)\n   */\n  disconnect(collectionViewer: CollectionViewer): void {\n    this.dataSubject.complete();\n    this.loadingSubject.complete();\n  }\n\n  /**\n   * (re)load data from the database for the given query and (if set) to current pagination values.\n   */\n  async loadData() {\n    this.loadingSubject.next(true);\n\n    const options: any = {\n      include_docs: true,\n    };\n    if (this.paginator) {\n      options.limit = this.paginator.pageSize;\n      options.skip = this.paginator.pageIndex * this.paginator.pageSize;\n    }\n\n    const results = await this.database.query(this.queryName, options);\n\n    this.paginator.length = results.total_rows;\n    this.dataSubject.next(results.rows);\n\n    this.loadingSubject.next(false);\n  }\n}\n"]}